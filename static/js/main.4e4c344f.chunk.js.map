{"version":3,"sources":["components/Pagination.js","components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","moviesPerPage","totalMovies","paginate","prepage","nextpage","pageNumbers","i","Math","ceil","push","className","onClick","map","number","key","class","Search","handleInput","search","type","placeholder","onChange","onKeyPress","Result","result","openPopup","imdbID","Title","src","Poster","alt","Results","results","loading","Popup","selected","closePopup","Year","imdbRating","Plot","App","useState","setLoading","currentPage","setCurrentPage","pageNav","setPageNav","s","state","setState","apiurl","indexOfLastMovie","indexOfFirstMovie","currentMovies","slice","e","target","value","prevState","axios","then","data","id","console","log","length","pageNumber","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4e4c344f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Pagination = ({moviesPerPage, totalMovies, paginate, prepage, nextpage}) => {\r\n    const pageNumbers =[];\r\n\r\n    for(let i=1; i<= Math.ceil(totalMovies / moviesPerPage); i++){\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination justify-content-center\">\r\n\r\n                <li className=\"page-item\">\r\n                <button className=\"page-link\" onClick={() => prepage()} >Previous</button>\r\n                </li>\r\n                {pageNumbers.map(number =>(\r\n                   \r\n                   <li key={number} className=\"page-item\">\r\n                        <button onClick={() => paginate(number)} className=\"page-link\">\r\n                            {number}\r\n                        </button>\r\n                    </li>\r\n                    \r\n                ))}\r\n                <li class=\"page-item\">\r\n                <button class=\"page-link\" onClick={() => nextpage()}>Next</button>\r\n                </li>\r\n\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react'\n\nfunction Search ({ handleInput, search }) {\n\treturn (\n\t\t<section className=\"searchbox-wrap\">\n\t\t\t<center><input \n\t\t\t\ttype=\"text\" \n\t\t\t\tplaceholder=\"Search Movies\" \n\t\t\t\tclassName=\"searchbox\" \n\t\t\t\tonChange={handleInput}\n\t\t\t\tonKeyPress={search}\n\t\t\t/></center>\n\t\t</section>\n\t)\n}\n\nexport default Search\n","import React from 'react'\n\nfunction Result({ result, openPopup }) {\n\treturn (\n\t\t<div className=\"result\" onClick={() => openPopup(result.imdbID)}>\n\t\t\t<h3>{result.Title}</h3>\n\t\t\t<img src={result.Poster} alt=\"Poster\" />\n\t\t</div>\n\t)\n}\n\nexport default Result\n","import React from 'react'\n\nimport Result from './Result'\n\nfunction Results ({ results, openPopup, loading }) {\n\tif(loading){\n\t\treturn <h2>Loading..</h2>;\n\t}\n\treturn (\n\t\t<section className=\"results\">\n\t\t\t{results.map(result => (\n\t\t\t\t<Result key={result.imdbID} result={result} openPopup={openPopup} />\n\t\t\t))}\n\t\t</section>\n\t)\n}\n\nexport default Results\n","import React from 'react'\n\nfunction Popup({ selected, closePopup }) {\n\treturn (\n\t\t<section className=\"popup\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<h2>{ selected.Title } <span>({ selected.Year })</span></h2>\n\t\t\t\t<p className=\"rating\">Rating: {selected.imdbRating}</p>\n\t\t\t\t<div className=\"plot\">\n\t\t\t\t\t<img src={selected.Poster} alt=\"Poster\"/>\n\t\t\t\t\t<p>{selected.Plot}</p>\n\t\t\t\t</div>\n\t\t\t\t<button className=\"close\" onClick={closePopup}>Close</button>\n\t\t\t</div>\n\t\t</section>\n\t)\n}\n\nexport default Popup\n","import React, { useState } from 'react'\nimport axios from 'axios'\n\nimport {Pagination} from './components/Pagination'\nimport Search from './components/Search'\nimport Results from './components/Results'\nimport Popup from './components/Popup'\n\nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [moviesPerPage] = useState(3);\n  const [pageNav, setPageNav] = useState(false);\n\n\n  const [state, setState] = useState({\n    s: \"\",\n    results: [],\n    selected: {}\n  });\n  const apiurl = \"http://www.omdbapi.com/?apikey=dfe6d885\";\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      setLoading(true);\n      axios(apiurl + \"&s=\" + state.s).then(({ data }) => {\n        let results = data.Search;\n\n        setState(prevState => {\n          return { ...prevState, results: results }\n        })\n      });\n      setLoading(false);\n      setPageNav(true);\n    }\n  }\n  \n  const handleInput = (e) => {\n    let s = e.target.value;\n\n    setState(prevState => {\n      return { ...prevState, s: s }\n    });\n  }\n\n  const openPopup = id => {\n    axios(apiurl + \"&i=\" + id).then(({ data }) => {\n      let result = data;\n\n      console.log(result);\n\n      setState(prevState => {\n        return { ...prevState, selected: result }\n      });\n    });\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, selected: {} }\n    });\n  }\n\n\n  const indexOfLastMovie = currentPage * moviesPerPage;\n  const indexOfFirstMovie = indexOfLastMovie - moviesPerPage;\n  const currentMovies = state.results.slice(indexOfFirstMovie, indexOfLastMovie);\n\n  const paginate =(pageNumber) =>setCurrentPage(pageNumber);\n\n  const prepage =() =>{ \n    if(currentPage===1);\n    else\n      setCurrentPage(currentPage-1);\n  }\n\n  const nextpage =() =>{\n    if(currentPage===Math.ceil(state.results.length / moviesPerPage));\n    else\n    setCurrentPage(currentPage+1);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Movisualize</h1><Search handleInput={handleInput} search={search} />\n      </header>\n      <main>\n        \n\n        <Results results={currentMovies} loading={loading} openPopup={openPopup} />\n        { pageNav ? <Pagination \n        moviesPerPage={moviesPerPage}\n        totalMovies={state.results.length} \n        paginate={paginate}\n        prepage={prepage}\n        nextpage={nextpage}\n        /> : null}\n        {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> : false}\n      </main>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}